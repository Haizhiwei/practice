软通动力：

第一轮：
servlet的生命周期
  Servlet生命周期分为三个阶段：
  1，初始化阶段  调用init()方法
  2，响应客户请求阶段　　调用service()方法
  3，终止阶段　　调用destroy()方法
     最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。
Servlet初始化阶段：
  在下列时刻Servlet容器装载Servlet：
  1，Servlet容器启动时自动装载某些Servlet，实现它只需要在web.XML文件中的<Servlet></Servlet>之间添加如下代码：
<loadon-startup>1</loadon-startup> 
　　　　2，在Servlet容器启动后，客户首次向Servlet发送请求
        3，Servlet类文件被更新后，重新装载Servlet
  Servlet被装载后，Servlet容器创建一个Servlet实例并且调用Servlet的init()方法进行初始化。在Servlet的整个生命周期内，init()方法只被调用一次。
Servlet工作原理：

　　首先简单解释一下Servlet接收和响应客户请求的过程，首先客户发送一个请求，Servlet是调用service()方法对请求进行响应的，通过源代码可见，service()方法中对请求的方式进行了匹配，选择调用doGet,doPost等这些方法，然后再进入对应的方法中调用逻辑层的方法，实现对客户的响应。在Servlet接口和GenericServlet中是没有doGet,doPost等等这些方法的，HttpServlet中定义了这些方法，但是都是返回error信息，所以，我们每次定义一个Servlet的时候，都必须实现doGet或doPost等这些方法。

　　每一个自定义的Servlet都必须实现Servlet的接口，Servlet接口中定义了五个方法，其中比较重要的三个方法涉及到Servlet的生命周期，分别是上文提到的init(),service(),destroy()方法。GenericServlet是一个通用的，不特定于任何协议的Servlet,它实现了Servlet接口。而HttpServlet继承于GenericServlet，因此HttpServlet也实现了Servlet接口。所以我们定义Servlet的时候只需要继承HttpServlet即可。

　　Servlet接口和GenericServlet是不特定于任何协议的，而HttpServlet是特定于HTTP协议的类，所以HttpServlet中实现了service()方法，并将请求ServletRequest,ServletResponse强转为HttpRequest和HttpResponse。

public void service(ServletRequest req,ServletResponse res) 
  throws ServletException,IOException
{
      HttpRequest request;
      HttpResponse response;
 
     try
     {
         req = (HttpRequest)request;
         res = (HttpResponse)response;
      }catch(ClassCastException e)
      {
         throw new ServletException("non-HTTP request response"); 
      }
      service(request,response);
}
    代码的最后调用了HTTPServlet自己的service(request,response)方法，然后根据请求去调用对应的doXXX方法，因为HttpServlet中的doXXX方法都是返回错误信息，

protected void doGet(HttpServletRequest res,HttpServletResponse resp)
  throws ServletException,IOException
{
   String protocol = req.getProtocol();
   String msg = IStrings.getString("http.method_get_not_supported");
   if(protocol.equals("1.1"))
   {
      resp.sendError(HttpServletResponse.SC.METHOD.NOT.ALLOWED,msg);
    }
   esle
    {
      resp.sendError(HttpServletResponse.SC_BAD_REQUEST,msg);
    }
}
所以需要我们在自定义的Servlet中override这些方法！

　　　　源码面前，了无秘密！

---------------------------------------------------------------------------------------------------------------------------------

Servlet响应请求阶段：

　　对于用户到达Servlet的请求，Servlet容器会创建特定于这个请求的ServletRequest对象和ServletResponse对象，然后调用Servlet的service方法。service方法从ServletRequest对象获得客户请求信息，处理该请求，并通过ServletResponse对象向客户返回响应信息。

　　对于Tomcat来说，它会将传递过来的参数放在一个Hashtable中，该Hashtable的定义是：

private Hashtable<String String[]> paramHashStringArray = new Hashtable<String String[]>();
　　这是一个String-->String[]的键值映射。

　　HashMap线程不安全的，Hashtable线程安全。

-----------------------------------------------------------------------------------------------------------------------------------

Servlet终止阶段：

　　当WEB应用被终止，或Servlet容器终止运行，或Servlet容器重新装载Servlet新实例时，Servlet容器会先调用Servlet的destroy()方法，在destroy()方法中可以释放掉Servlet所占用的资源。

-----------------------------------------------------------------------------------------------------------------------------------

Servlet何时被创建：

　　1，默认情况下，当WEB客户第一次请求访问某个Servlet的时候，WEB容器将创建这个Servlet的实例。

　　2，当web.xml文件中如果<servlet>元素中指定了<load-on-startup>子元素时，Servlet容器在启动web服务器时，将按照顺序创建并初始化Servlet对象。

　　注意：在web.xml文件中，某些Servlet只有<serlvet>元素，没有<servlet-mapping>元素，这样我们无法通过url的方式访问这些Servlet，这种Servlet通常会在<servlet>元素中配置一个<load-on-startup>子元素，让容器在启动的时候自动加载这些Servlet并调用init()方法，完成一些全局性的初始化工作。



Web应用何时被启动：

　　1，当Servlet容器启动的时候，所有的Web应用都会被启动

　　2，控制器启动web应用

-----------------------------------------------------------------------------------------------------------------------------------------------

Servlet与JSP的比较：

　　有许多相似之处，都可以生成动态网页。

　　JSP的优点是擅长于网页制作，生成动态页面比较直观，缺点是不容易跟踪与排错。

　　Servlet是纯Java语言，擅长于处理流程和业务逻辑，缺点是生成动态网页不直观。




struts1和struts2的区别
 首先：struts1是通过servlet启动的。
一、struts1要求Action类继承一个抽象基类，而不是接口。 
    struts2的action类可以实现一个action接口，也可以实现其他接口。 

二、sturts1 action是单例模式，线程是不安全的。 
    struts2 action线程是安全的，action为每一个请求都生成了一个实例。 

三、sturts1过去依赖serlet API，不容易测试。 
    struts2不依赖于容器，允许Action脱离容器单独被测试。 

四、Struts1 使用ActionForm对象捕获输入。所有的ActionForm必须继承一个基类。 
    Struts2 直接使用Action属性作为输入属性，消除了对第二个输入对象的需求。 

五、Struts1 整合了JSTL，因此使用JSTL EL。这种EL有基本对象图遍历，但是对集合和索引属性的支持很弱。 
    Struts2 可以使用JSTL，但是也支持一个更强大和灵活的表达式语言－－&quot;Object Graph Notation Language&quot; (OGNL). 

六、Struts1 使用标准JSP机制把对象绑定到页面中来访问。 
    Struts2 使用 &quot;ValueStack&quot;技术，使taglib能够访问值而不需要把你的页面（view）和对象绑定起来。 

七、Struts1 ActionForm 属性通常都是String类型。Struts1使用Commons-Beanuti<a target=_blank href="http://www.linuxso.com/command/ls.html" target="_blank" style="color: rgb(255, 153, 0); text-decoration: none;"><u>ls</u></a>进行类型转换。 
    Struts2 使用OGNL进行类型转换。提供基本和常用对象的转换器。 

八、Struts1 支持在ActionForm的validate方法中手动校验，或者通过Commons Validator的扩展来校验。 
    Struts2 支持通过validate方法和XWork校验框架来进行校验。 
        
        
        
servlet是什么模式？
  Java Servlet单实例多线程模式
  理解两个问题足以,问题如下：
     1、如果不同的2个用户同时对这个网站的不同业务同时发出请求（如注册和登陆），那容器里有几个servlet呢
     2、不同的用户同时对同一个业务（如注册）发出请求，那这个时候容器里产生的有是几个servlet实例呢？

答案:

引子：一个web容器，可以有多个servlet。 对提交到同一个servlet类的多个业务请求，共享一个servlet对象（即这个
servlet类只被实例化一次）
但别忘了，请求还可以从一个servlet forward到另一个servlet,因此一个请求是可以产生多个servlet的，但是由不同
的servlet类实例化的，每个servlet类都只被实例化一次，直到应用程序终止或服务器shutdown
问题1的答案：容器里有2个servlet（当然，这是在“一个servlet对应一种业务请求”的前提下，如果你要把两个业务逻辑
写在同一个servlet内另当别论了）
问题2的答案：只有一个servlet实例。一个servlet是在第一次被访问时加载到内存并实例化的。同样的业务请求共享一个
servlet实例。不同的业务请求一般对应不同的servlet. 想也知道拉，如果一个网站要被几千万人同时登录，如果创建几千万个实例的话服务器还怎么跑得动？

单例模式如何处理高并发？


高并发的根源是什么？

用的最多的单元测试工具？


junit3和junit4的区别
1、JUnit 4使用org.junit.*包而JUnit 3.8使用的是junit.Framework.*;为了向后兼容,JUnit4发行版中加入了这两种包。

2、JUnit3中,测试类需要继承junit.framework.TestCase类,而在JUniy4则不用。

3、JUnit3通过分析方法名称来识别测试方法：方法名必须以“test”为前缀,它必须返回void,而且它必须没有任何参数(例如 public void testDivide())。不遵循这个命名约定的测试方法将被JUnit框架忽略,而且不抛出任何异常（指示发生了一个错误）。

在JUnit4中,测试方法不必以'test'为前缀,而是使用@Test注解。但测试方法也必须返回void并且无参。在JUnit4中,可以在运行时控制这个要求,并且不符合要求的话会抛出一个异常：

java.lang.Exception: Method xxx should have no parameters
java.lang.Exception: Method xxx should be void

@Test注解支持可选参数。它声明一个测试方法应该抛出一个异常。如果它不抛出或者如果它抛出一个与事先声明的不同的异常，那么该测试失败。

4、在JUnit3.8中,TestCase类定义了assertEquals()方法,如果要在JUnit中向后兼容,必须静态地导入Assert类。这样一来,就可以像以前一样使用assertEquals方法。

另外，在JUnit 4中，还引入了两个新的断言方法，它们专门用于数组对象的比较。如果两个数组包含的元素都相等，那么这两个数组就是相等的。

public static void assertEquals(String message, Object[] expecteds, Object[] actuals);

public static void assertEquals(Object[] expecteds, Object[] actuals); 

由于JDK 5.0的自动装箱机制的出现，原先的12个assertEquals方法全部去掉了。

例如，原先JUnit 3.8中的assertEquals(long，long)方法在JUnit 4中要使用assertEquals(Object，Object)。对于assertEquals(byte，byte)、 assertEquals(int，int)等也是这样。这种改进将有助于避免反模式。

在JUnit 4中，新集成了一个assert关键字(见我们的例子中的divide()方法)。你可以象使用assertEquals方法一样来使用它，因为它们都抛出相同的异常(java.lang.AssertionError)。JUnit 3.8的assertEquals将抛出一个junit.framework.AssertionFailedError。注意，当使用assert时， 你必须指定Java的"-ea"参数；否则，断言将被忽略。

5、预设环境(Fixture)

Fixture是在测试期间初始化和释放任何普通对象的方法。在JUnit 3.8中，你要使用setUp()来实现运行每一个测试前的初始化工作，然后使用tearDown()来进行每个测试后的清理。这两个方法在 TestCase类中都得到重载，因此都被唯一定义。注意，我在这个Setup方法使用的是Java5.0内置的@Override注解-这个注解指示该 方法声明要重载在超类中的方法声明。在JUnit 4中，则代之使用的是@Before和@After注解；而且，可以以任何命名。

6、如果想忽略某个测试方法,在JUnit3中,通过注释掉该方法或者改变命名约定,这样测试运行机就无法找到它;问题随之而来,如果在众多测试中忽略某些测试方法,你可能记不住重命名这个方法;

而在JUnit4中,把@Ignore注解添加到@Test的前面或者后面即可。其好处在于,测试运行机将会统计出忽略的测试方法数目、运行的测试方法数目以及运行失败的测试方法数目。@Ignore使用一个可选参数(一个String)记录方法被忽略的原因。

7、在JUnit3.8中,可以选择使用若干运行机：文本型，AWT或者Swing。JUnit4仅使用文本测试运行机。

注意,JUnit4不会显示任何绿色条来通知你测试成功了。如果你想看到任何类型的绿色的话，那么你可能需要使用JUnit扩展或一种集成了JUnit的IDE（例如 IDEA或者Eclipse）。




如何写一个单元测试类？



在一个单元测试方法前如何进行对象的初始化？
单元测试方法执行后有什么方法进行资源的释放
假如有三个单元测试方法，前后的这两个方法要执行几次？
加入前后的方法只执行一次，如何让三个测试方法同时进行？




数据库中查询两个结果集如何相减？如何相加？

两个数据表db1,db2
查询结果A是从数据表db1获取的：
select names, sale from db1
查询结果B是从数据表db2获取的：
select names, sale from db2
则查询结果C：
select names,sum(sale) as sale
 from
    (select names, sale from db1
      union
     select names, sale from db2
    )
 group by names






union和unionall的区别
Union因为要进行重复值扫描，所以效率低。如果合并没有刻意要删除重复行，那么就使用Union All

 两个要联合的SQL语句 字段个数必须一样，而且字段类型要“相容”（一致）；
 如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。 
union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。 


Union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序； 

Union All：对两个结果集进行并集操作，包括重复行，不进行排序； 

Intersect：对两个结果集进行交集操作，不包括重复行，同时进行默认规则的排序； 

Minus：对两个结果集进行差操作，不包括重复行，同时进行默认规则的排序。 

可以在最后一个结果集中指定Order by子句改变排序方式。 

例如： 

select employee_id,job_id from employees 
union 
select employee_id,job_id from job_history 

以上将两个表的结果联合在一起。这两个例子会将两个select语句的结果中的重复值进行压缩，也就是结果的数据并不是两条结果的条数的和。如果希望即使重复的结果显示出来可以使用union all,例如： 

2.在oracle的scott用户中有表emp 
select * from emp where deptno >= 20 
union all 
select * from emp where deptno <= 30 
这里的结果就有很多重复值了。 

有关union和union all关键字需要注意的问题是： 

union 和 union all都可以将多个结果集合并，而不仅仅是两个，你可以将多个结果集串起来。 
使用union和union all必须保证各个select 集合的结果有相同个数的列，并且每个列的类型是一样的。但列名则不一定需要相同，oracle会将第一个结果的列名作为结果集的列名。例如下面是一个例子： 
select empno,ename from emp 
union 
select deptno,dname from dept 
我们没有必要在每一个select结果集中使用order by子句来进行排序，我们可以在最后使用一条order by来对整个结果进行排序。例如： 
select empno,ename from emp 
union 
select deptno,dname from dept 
order by ename;




第二轮：
servlet的生命周期
描述在一个浏览器上输入一个网址到显示一个网页的执行流程
描述下你的性格
你的职业规划
为什么辞职
你在开发行业前是从事什么工作的？
你从别的行业转行从事开发行业刚开始是如何适应的

从头到尾没问到项目！！